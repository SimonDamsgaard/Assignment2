LI R0 0          'x'
LI R1 0          'y'
LI R2 0          'The constant 0 - Will remain unchanged throughout the program'
LI R3 19         'The constant 19 for iterating'
MULI R6 R1 20    'Multiplying y by 20'
ADD R6 R6 R0     '20*y + x storing the memory address'
BEQ 32 R0 R3     'If x == 0 then handle that case'
BEQ 28 R0 R2     'If x == 19 then handle that case'
BEQ 28 R1 R2     'If y == 0 then handle that case'
BEQ 28 R1 R3     'If y == 19 then handle that case'
LD R7 R6         'Load the pixel value'
BEQ 28 R7 R2     'If the pixel is black - handle the case'
SUBI R9 R6 1     'Memory address - 1'
LD R10 R9        'Load the pixel value of the left neighbor'
BEQ 28 R10 R2    'If the pixel is black - handle the case'
ADDI R9 R6 1     'Memory address + 1'
LD R10 R9        'Load the pixel value of the right neighbor'
BEQ 28 R10 R2    'If the pixel is black - handle the case'
SUBI R9 R6 20    'Memory address - 20'
LD R10 R9        'Load the pixel value of the up neighbor'
BEQ 28 R10 R2    'If the pixel is black - handle the case'
ADDI R9 R6 20    'Memory address + 20'
LD R10 R9        'Load the pixel value of the down neighbor'
BEQ 28 R10 R2    'If the pixel is black - handle the case'
ADDI R6 R6 400   'Memory address + 400'
SD R7 R6         'Give the input pixel value to the output pixel (R6 is the memory address of the output pixel)'
ADDI R0 R0 1     'x = x + 1'
BEQ 4 R0 R0      'Jump to line 8'
ADDI R6 R6 400   'Memory address + 400' Major point in the flow of execution
SD R2 R6         'Set the output pixel to black'
ADDI R0 R0 1     'x = x + 1'
BEQ 4 R0 R0      'Jump to line 8'
ADDI R6 R6 400   'Memory address + 400' Major point in the flow of execution
SD R2 R6         'Set the output pixel to black'
BEQ 38 R1 R3     'If y == 19 then we terminate the program'
LI R0 0          'Reset x to 0'
ADDI R1 R1 1     'Increment y by 1'
BEQ 4 R0 R0      'Jump to line 8'
END
