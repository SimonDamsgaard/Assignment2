LI R1 0 'x'
LI R2 0 'y'   
LI R3 0 'The constant 0 - Will remain unchanged throughout the program' We keep
LI R4 19 'The constant 19 for iterating' We kkep
MULI R7 R2 20 'Multiplying y by 20'
ADD  R7 R7 R1 '20*y + x storing the memory address'
BEQ 33 R1 R4 'If x == 19 then handle that case'
BEQ 29 R1 R3 'If x == 0 then handle that case'
BEQ 29 R2 R3 'If y == 0 then handle that case'
BEQ 29 R2 R4 'If y == 19 then handle that case'
LD  R8 R7 'Load the pixel value'
BEQ 29 R8 R3 'If the pixel is black - handle the case
SUBI R10 R7 1 'Memory address - 1' 
LD  R11 R10 'Load the pixel value of the left neighbor'
BEQ 29 R11 R3 'If the pixel is black - handle the case
ADDI R10 R7 1 'Memory address + 1'
LD  R11 R10 'Load the pixel value of the right neighbor'
BEQ 29 R11 R3 'If the pixel is black - handle the case
SUBI R10 R7 20 'Memory address - 20'
LD  R11 R10 'Load the pixel value of the up neighbor'
BEQ 29 R11 R3 'If the pixel is black - handle the case
ADDI R10 R7 20 'Memory address + 20'
LD  R11 R10 'Load the pixel value of the down neighbor'
BEQ 29 R11 R3 'If the pixel is black - handle the case
ADDI R7 R7 400 'Memory address + 400'
SD R8 R7 'Give the input pixel value to the output pixel (R7 is the memory address of the output pixel)'
ADDI R1 R1 1 'x = x + 1'
BEQ 8 R1 R1 'Jump to line 8'
ADDI R7 R7 400 'Memory address + 400' Major point in the flow of execution
SD R3 R7 'Set the output pixel to black
ADDI R1 R1 1 'x = x + 1'
BEQ 5 R1 R1 'Jump to line 8'
ADDI R7 R7 400 'Memory address + 400' Major point in the flow of execution
SD R3 R7 'Set the output pixel to black
BEQ 39 R2 R4 'If the y is also 19 then we terminate the program'
LI R1 0
ADDI R2 R2 1 'Increment y by 1'
BEQ 5 R1 R1
END